const gulp = require('gulp');
const path = require('path');
const chalk = require('chalk');
const commander = require('commander');

const tasks = require('../gulpfile');
const webpackTask = require('../webpack');

commander.on('--help', () => {
  process.stdout.write(chalk.blue('  Usage:\n'));
  process.stdout.write(chalk.red('    lint: lint your source code\n'));
  process.stdout.write(chalk.blue('    es:   compile to es module\n'));
  process.stdout.write(chalk.green('    lib:  compile to cjs module\n'));
  process.stdout.write(chalk.yellow('    dev [workspace]: 调试开发\n'));
  process.stdout.write(chalk.white('    build [workspace]: 打包\n'));
});

gulp.addListener('task_not_found', (payload) => {
  process.stdout.write(chalk.red(`no task [${chalk.white(payload.task)}] found, try \`--help\` for help.\n`));
  commander.help();
});

gulp.addListener('error', (payload) => {
  process.stdout.write(chalk.red(`task failed: ${payload.error.message}\n`));
  // commander.help();
  process.exit(1);
});

commander.parse(process.argv);
const { args } = commander;
const [command] = args;
let workspace = '';
if (args.length > 1) {
  // eslint-disable-next-line prefer-destructuring
  workspace = args[1];
}
const entry = path.resolve(process.cwd(), workspace);

const ext = {};
if (!command) {
  commander.help();
} else if (['dev', 'build'].includes(command)) {
  const restParams = args.slice(2);
  const ext = {};
  restParams.forEach(item => {
    const [key, value] = item.split('=');
    Object.assign(ext, {
      [key]: value,
    });
  });
  webpackTask(command, entry, ext);
} else {
  const taskInstance = tasks[command];
  if (!taskInstance) {
    gulp.emit('task_not_found', { task: command });
  } else {
    try {
      process.stdout.write(chalk.green(`run task [${command}], please wait...\n`));
      taskInstance.call(gulp, (error) => {
        if (!error) {
          process.stdout.write(chalk.green(`task [${command}] done.\n`));
        }
      });
    } catch (error) {
      gulp.emit('error', { task: command, error });
    }
  }
}
