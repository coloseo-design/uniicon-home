/* eslint-disable max-len */
/* eslint-disable global-require */
const chalk = require('chalk');
const path = require('path');
const webpack = require('webpack');
const WebpackDevServer = require('webpack-dev-server');
const { getUniFile } = require('../utils/file');

const modeMap = {
  dev: 'development',
  build: 'production',
};

/**
 * 启动webpack
 * @param {string} command run dev | build
 * @param {string} workspace 当前指定的工作目录
 * @author luoboding
 */
module.exports = function webpackTask(command, workspace) {
  const mode = modeMap[command];
  const webpackConfig = require('./config/webpack/webpack.config')(workspace, mode);
  const compiler = webpack(webpackConfig);
  if (mode === 'development') {
    const host = getUniFile().devServer && getUniFile().devServer.host ? getUniFile().devServer.host : '0.0.0.0';
    const port = getUniFile().devServer && getUniFile().devServer.port ? getUniFile().devServer.port : 3000;
    const server = new WebpackDevServer(compiler, {
      contentBase: path.resolve(workspace, 'dist'),
      publicPath: getUniFile().publicPath || '',
      hot: true,
      host,
      proxy: getUniFile().devServer && getUniFile().devServer.proxy,
    });
    server.listen(port, host, () => {
      process.stdout.write(chalk.green(`dev server listening on port ${port}\n`));
    });
  }

  if (mode === 'production') {
    compiler.run((err, stats) => {
      if (err) {
        process.stdout.write(chalk.red(`[error]: ${err.message}\n`));
        return;
      }
      if (stats.hasErrors) {
        process.stdout.write(stats.toString({
          colors: true,
        }));
      }
    });
  }
};
