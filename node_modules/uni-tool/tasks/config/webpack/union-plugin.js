/* eslint-disable max-len */
/* eslint-disable consistent-return */
/* eslint-disable @typescript-eslint/no-var-requires */
const glob = require('glob');
const fs = require('fs');
const path = require('path');

class UnionPlugin {
  constructor() {
    this.pluginName = 'union design plugin';
    this.preFiles = [];
  }

  getModels() {
    const base = process.cwd();
    const moldelsFiles = glob.sync('src/models/*.{ts,tsx,js,jsx}', {
      cwd: base,
    });
    const singleModelFiles = glob.sync('src/pages/**/model.{ts,tsx,js,jsx}', {
      cwd: base,
    });
    const pagesModelFiles = glob.sync('src/pages/**/models/*.{ts,tsx,js,jsx}', {
      cwd: base,
    });
    const files = Array.from(new Set([...moldelsFiles, ...singleModelFiles, ...pagesModelFiles]));
    if (this.preFiles.toString() !== files.toString()) {
      this.preFiles = [...files];
      let content = `/* eslint-disable @typescript-eslint/no-var-requires */
import { init } from '@rematch/core';

const store = init();
`;
      files.forEach((element) => {
        content += `\nstore.addModel(require('./${element}').default);\n`;
      });
      content += '\nexport default store;\n';
      // fs.unlinkSync('dva.js');
      fs.writeFile('store.js', content, (error) => {
        if (error) {
          console.log(error);
          return false;
        }
        console.log('写入成功');
      });
    }
  }

  apply(compiler) {
    compiler.hooks.watchRun.tap(this.pluginName, (compilation) => {
      Object.assign(compilation.watchFileSystem.watcher.watcherOptions, {
        ignored: /node_modules/,
      });
      this.getModels();
    });
    compiler.hooks.afterCompile.tap(this.pluginName, (compilation) => {
      compilation.contextDependencies.add(path.resolve(process.cwd(), 'src/models')).add(path.resolve(process.cwd(), 'src/pages'));
    });
  }
}

module.exports = UnionPlugin;
