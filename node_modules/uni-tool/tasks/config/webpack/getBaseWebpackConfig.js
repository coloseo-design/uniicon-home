/* eslint-disable max-len */
/* eslint-disable guard-for-in */
/* eslint-disable no-restricted-syntax */
/* eslint-disable global-require */
/* eslint-disable import/no-dynamic-require */
/* eslint-disable @typescript-eslint/no-var-requires */
const fs = require('fs');
const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const TerserJSPlugin = require('terser-webpack-plugin');
const OptimizeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin');
const { getTSlintConfig } = require('./getTsLintConfig');
const { getHtmlWebpackPluginConfig } = require('./getHtmlWebpackPluginConfig');
const { getUniFile, isFileExist } = require('../../../utils/file');
const babelConfig = require('../babel.config');
const UnionPlugin = require('./union-plugin');

const extensions = ['.tsx', '.ts', '.js'];
/**
 * 获取默认的webpack配置
 * @param {string} workspace
 * @author luoboding
 */

module.exports.getBaseWebpackConfig = function getBaseWebpackConfig(workspace, mode) {
  // 默认将src目录下的*.[js, tsx, ts]文件作为主入口, 多入口支持
  const entryPath = path.join(workspace, 'src');
  const outputPath = path.join(workspace, getUniFile().outputPath || 'dist');
  const dir = fs.readdirSync(entryPath);
  const entry = dir.reduce((d, file) => {
    const extname = path.extname(file);
    if (extensions.includes(extname)) {
      const basename = path.basename(file, extname);
      if (basename === 'index') {
        Object.assign(d, {
          [basename]: path.join(workspace, 'src', file),
        });
      }
    }
    return d;
  }, {});

  const htmlPath = path.resolve(process.cwd(), 'public/index.html');
  const storePath = path.resolve(process.cwd(), 'store.js');
  const plugins = [
    new CleanWebpackPlugin(),
    isFileExist(htmlPath) ? new HtmlWebpackPlugin({
      template: htmlPath,
      filename: 'index.html',
      inject: true,
    }) : new HtmlWebpackPlugin(getHtmlWebpackPluginConfig(workspace)),
  ];

  const define = getUniFile().define || {};
  const obj = {};
  for (const key in define) {
    Object.assign(obj, {
      [key]: JSON.stringify(define[key]),
    });
  }

  if (define) {
    plugins.push(new webpack.DefinePlugin({
      'process.env.NODE_ENV': JSON.stringify(mode),
      ...obj,
    }));
  }

  if (isFileExist(storePath)) {
    plugins.push(new UnionPlugin());
  }
  if (mode === 'production') {
    plugins.push(new MiniCssExtractPlugin({
      filename: getUniFile().hash ? '[name]-[hash].css' : '[name].css',
      chunkFilename: '[id]-[hash].css',
    }));
  }

  const babelConfigure = babelConfig();
  // 增加组件按需加载
  if (getUniFile().babel && getUniFile().babel.plugins) {
    babelConfigure.plugins.unshift(...getUniFile().babel.plugins);
  }
  if (getUniFile().babel && getUniFile().babel.presets) {
    babelConfigure.presets.push(...getUniFile().babel.presets);
  }
  const conf = {
    mode,
    entry,
    output: {
      path: outputPath,
      publicPath: getUniFile().publicPath || './',
      filename: getUniFile().hash ? '[name]-[hash].js' : '[name].js',
    },
    devtool: 'source-map',
    module: {
      rules: [
        {
          test: /\.ts(x?)$/,
          enforce: 'pre',
          use: [
            {
              loader: 'eslint-loader',
              options: {
                ...getTSlintConfig(workspace),
              },
            },
          ],
          exclude: /(node_modules|bower_components)/,
        },
        {
          test: /\.ts(x?)$/,
          use: [
            {
              loader: 'babel-loader',
              options: babelConfigure,
            },
            {
              loader: 'ts-loader',
              options: {
                transpileOnly: true,
                configFile: path.resolve(workspace, 'tsconfig.json'),
              },
            },
          ],
          exclude: /(node_modules|bower_components)/,
        },
        {
          test: /\.js(x?)$/,
          use: [
            {
              loader: 'babel-loader',
              options: babelConfig(),
            },
          ],
          exclude: /(node_modules|bower_components)/,
        },
        {
          enforce: 'pre',
          test: /\.js$/,
          loader: 'source-map-loader',
        },
        {
          test: /\.css$/,
          use: [
            mode === 'production'
              ? {
                loader: MiniCssExtractPlugin.loader,
              } : {
                loader: 'style-loader', // creates style nodes from JS strings
              },
            {
              loader: 'css-loader', // translates CSS into CommonJS
            },
          ],
        },
        {
          test: /\.less$/,
          use: [
            mode === 'production'
              ? {
                loader: MiniCssExtractPlugin.loader,
              } : {
                loader: 'style-loader', // creates style nodes from JS strings
              },
            {
              loader: 'css-loader', // translates CSS into CommonJS
            },
            {
              loader: 'postcss-loader',
              options: {
                config: {
                  path: path.join(__dirname, './postcss.config.js'),
                },
              },
            },
            {
              loader: 'less-loader', // compiles Less to CSS
              options: {
                javascriptEnabled: true,
                modifyVars: {
                  ...getUniFile().theme,
                },
              },
            },
          ],
        },
        {
          test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/, /\.mp4$/, /\.svg$/],
          loader: require.resolve('url-loader'),
          options: {
            limit: false,
            esModule: false,
            name: 'static/media/[name].[hash:8].[ext]',
          },
        },
      ],
    },
    resolve: {
      extensions,
      alias: { ...getUniFile()?.alias },
    },
    plugins,
  };
  if (mode === 'production') {
    Object.assign(conf, {
      optimization: {
        splitChunks: {
          chunks: 'all',
        },
        minimizer: [
          new TerserJSPlugin({}),
          new OptimizeCSSAssetsPlugin({
            cssProcessorOptions: {
              map: {
                // 不生成内联映射,这样配置就会生成一个source-map文件
                inline: false,
                // 向css文件添加source-map路径注释
                // 如果没有此项压缩后的css会去除source-map路径注释
                annotation: true,
              },
            },
          }),
        ],
      },
    });
  }
  return conf;
};
